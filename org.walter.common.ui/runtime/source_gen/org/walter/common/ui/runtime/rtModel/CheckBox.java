package org.walter.common.ui.runtime.rtModel;

/*Generated by MPS */

import javax.swing.JCheckBox;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import org.apache.log4j.Level;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import javax.swing.Icon;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class CheckBox extends JCheckBox {
  /*package*/ IconProvider iconProvider;
  public CheckBox(final SNode node, final String id, final EditorContext editorContext, final CheckBoxPropertiesProvider propertyProvider, final CheckBoxCallBack onSelected, final CheckBoxCallBack onDeSelected) {
    iconProvider = new IconProvider(propertyProvider.getStyle());
    this.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent actionEvent) {
        final JCheckBox cbx = as_d8qwo1_a0a0a0a0a0a1a1(actionEvent.getSource(), JCheckBox.class);
        editorContext.getRepository().getModelAccess().runWriteAction(new Runnable() {
          public void run() {
            if (cbx.isSelected()) {
              if (LOG.isEnabledFor(Level.WARN)) {
                LOG.warn("selected");
              }
              editorContext.getRepository().getModelAccess().executeCommand(new Runnable() {
                public void run() {
                  onSelected.run();
                }
              });

              SNode selectionAttribute = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x949fc8316aef4545L, 0x8859ffa2eed47cbfL, 0x7bf6c30e4f52e957L, "org.walter.common.ui.structure.SelectedAttribute")));
              SPropertyOperations.set(selectionAttribute, MetaAdapterFactory.getProperty(0x949fc8316aef4545L, 0x8859ffa2eed47cbfL, 0x7bf6c30e4f52e957L, 0x7bf6c30e4f52e98dL, "id"), id);
              ListSequence.fromList(AttributeOperations.getAttributeList(node, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0x949fc8316aef4545L, 0x8859ffa2eed47cbfL, 0x7bf6c30e4f52e957L, "org.walter.common.ui.structure.SelectedAttribute")))).addElement(selectionAttribute);
            } else {
              if (LOG.isEnabledFor(Level.WARN)) {
                LOG.warn("deselected");
              }
              editorContext.getRepository().getModelAccess().executeCommand(new Runnable() {
                public void run() {
                  onDeSelected.run();
                }
              });
              SNodeOperations.deleteNode(ListSequence.fromList(AttributeOperations.getAttributeList(node, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0x949fc8316aef4545L, 0x8859ffa2eed47cbfL, 0x7bf6c30e4f52e957L, "org.walter.common.ui.structure.SelectedAttribute")))).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0x949fc8316aef4545L, 0x8859ffa2eed47cbfL, 0x7bf6c30e4f52e957L, 0x7bf6c30e4f52e98dL, "id")).equals(id);
                }
              }));
            }
          }
        });
      }
    });
    setSelected(propertyProvider.getInitValue());
    setOpaque(propertyProvider.getIsOpaque());
    setText(propertyProvider.getText());
    setHorizontalTextPosition(propertyProvider.getHorizontalTextPosition());
    setFont(propertyProvider.getFont());
    SetIcons();
  }

  private void SetIcons() {
    Icon icon = iconProvider.getIcon();
    if (icon != null) {
      setIcon(icon);
    }
    icon = iconProvider.getSelectedIcon();
    if (icon != null) {
      setSelectedIcon(icon);
    }
  }
  protected static Logger LOG = LogManager.getLogger(CheckBox.class);
  private static <T> T as_d8qwo1_a0a0a0a0a0a1a1(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
