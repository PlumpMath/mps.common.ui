package org.walter.common.ui.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.impl.cellActions.CellAction_Comment;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.editor.Styles_StyleSheet;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class CheckBox_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_ndrqo4_a(editorContext, node);
  }
  public EditorCell createInspectedCell(EditorContext editorContext, SNode node) {
    return this.createCollection_ndrqo4_a_0(editorContext, node);
  }
  private EditorCell createCollection_ndrqo4_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ndrqo4_a");
    editorCell.setBig(true);
    editorCell.setAction(CellActionType.COMMENT, new CellAction_Comment(node));
    editorCell.addEditorCell(this.createConstant_ndrqo4_a0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_ndrqo4_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "checkbox");
    editorCell.setCellId("Constant_ndrqo4_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_ndrqo4_a_0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_ndrqo4_a_0");
    editorCell.setBig(true);
    editorCell.setAction(CellActionType.COMMENT, new CellAction_Comment(node));
    editorCell.addEditorCell(this.createCollection_ndrqo4_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ndrqo4_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ndrqo4_c0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_ndrqo4_d0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ndrqo4_e0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ndrqo4_f0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_ndrqo4_g0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ndrqo4_h0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ndrqo4_i0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_ndrqo4_j0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ndrqo4_k0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ndrqo4_l0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_ndrqo4_m0(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_ndrqo4_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ndrqo4_a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ndrqo4_a0a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_ndrqo4_b0a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_ndrqo4_a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "id:");
    editorCell.setCellId("Constant_ndrqo4_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_ndrqo4_b0a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("identifier");
    provider.setNoTargetText("<no identifier>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_identifier");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_ndrqo4_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_ndrqo4_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_ndrqo4_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Properties:");
    editorCell.setCellId("Constant_ndrqo4_c0");
    Style style = new StyleImpl();
    Styles_StyleSheet.apply_header(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_ndrqo4_d0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_ndrqo4_d0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.DRAW_BORDER, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setGridLayout(true);
    editorCell.addEditorCell(this.createCollection_ndrqo4_a3a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_ndrqo4_b3a(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_ndrqo4_a3a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ndrqo4_a3a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    style.set(StyleAttributes.DRAW_BORDER, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ndrqo4_a0d0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_ndrqo4_b0d0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_ndrqo4_a0d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "initial value");
    editorCell.setCellId("Constant_ndrqo4_a0d0");
    Style style = new StyleImpl();
    Styles_StyleSheet.apply_property(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_ndrqo4_b0d0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new CheckBox_Editor.initValueConditionSingleRoleHandler_ndrqo4_b0d0(node, MetaAdapterFactory.getContainmentLink(0x949fc8316aef4545L, 0x8859ffa2eed47cbfL, 0x3f0f5deef89fa172L, 0x3fdace61664c27e7L, "initValueCondition"), editorContext);
    return provider.createCell();
  }
  private class initValueConditionSingleRoleHandler_ndrqo4_b0d0 extends SingleRoleCellProvider {
    public initValueConditionSingleRoleHandler_ndrqo4_b0d0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    public EditorCell createChildCell(EditorContext editorContext, SNode child) {
      EditorCell editorCell = super.createChildCell(editorContext, child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    public void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("initValueCondition");
      }
      Style style = new StyleImpl();
      style.set(StyleAttributes.DRAW_BORDER, 0, true);
      editorCell.getStyle().putAll(style);
    }


    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_initValueCondition");
      installCellInfo(null, editorCell);
      return editorCell;
    }

    protected String getNoTargetText() {
      return "<no initValueCondition>";
    }

  }
  private EditorCell createCollection_ndrqo4_b3a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ndrqo4_b3a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    style.set(StyleAttributes.DRAW_BORDER, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ndrqo4_a1d0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_ndrqo4_b1d0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_ndrqo4_a1d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "is opaque");
    editorCell.setCellId("Constant_ndrqo4_a1d0");
    Style style = new StyleImpl();
    Styles_StyleSheet.apply_property(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_ndrqo4_b1d0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("opaque");
    provider.setNoTargetText("<no opaque>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_opaque");
    Style style = new StyleImpl();
    style.set(StyleAttributes.DRAW_BORDER, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_ndrqo4_e0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_ndrqo4_e0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_ndrqo4_f0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Style:");
    editorCell.setCellId("Constant_ndrqo4_f0");
    Style style = new StyleImpl();
    Styles_StyleSheet.apply_header(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_ndrqo4_g0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_ndrqo4_g0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setGridLayout(true);
    editorCell.addEditorCell(this.createCollection_ndrqo4_a6a(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_ndrqo4_a6a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ndrqo4_a6a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ndrqo4_a0g0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_ndrqo4_b0g0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_ndrqo4_a0g0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "style");
    editorCell.setCellId("Constant_ndrqo4_a0g0");
    Style style = new StyleImpl();
    Styles_StyleSheet.apply_property(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_ndrqo4_b0g0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("style");
    provider.setNoTargetText("<no style>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_style");
    Style style = new StyleImpl();
    style.set(StyleAttributes.DRAW_BORDER, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_ndrqo4_h0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_ndrqo4_h0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_ndrqo4_i0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Text:");
    editorCell.setCellId("Constant_ndrqo4_i0");
    Style style = new StyleImpl();
    Styles_StyleSheet.apply_header(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_ndrqo4_j0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new CheckBox_Editor.checkBoxTextSingleRoleHandler_ndrqo4_j0(node, MetaAdapterFactory.getContainmentLink(0x949fc8316aef4545L, 0x8859ffa2eed47cbfL, 0x3f0f5deef89fa172L, 0x622d6428b5f87fbdL, "checkBoxText"), editorContext);
    return provider.createCell();
  }
  private class checkBoxTextSingleRoleHandler_ndrqo4_j0 extends SingleRoleCellProvider {
    public checkBoxTextSingleRoleHandler_ndrqo4_j0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    public EditorCell createChildCell(EditorContext editorContext, SNode child) {
      EditorCell editorCell = super.createChildCell(editorContext, child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    public void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("checkBoxText");
      }
    }


    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_checkBoxText");
      installCellInfo(null, editorCell);
      return editorCell;
    }

    protected String getNoTargetText() {
      return "<no checkBoxText>";
    }

  }
  private EditorCell createConstant_ndrqo4_k0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_ndrqo4_k0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_ndrqo4_l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Behavior:");
    editorCell.setCellId("Constant_ndrqo4_l0");
    Style style = new StyleImpl();
    Styles_StyleSheet.apply_header(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_ndrqo4_m0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_ndrqo4_m0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    style.set(StyleAttributes.DRAW_BORDER, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setGridLayout(true);
    editorCell.addEditorCell(this.createCollection_ndrqo4_a21a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_ndrqo4_b21a(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_ndrqo4_a21a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ndrqo4_a21a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    style.set(StyleAttributes.DRAW_BORDER, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ndrqo4_a0m0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_ndrqo4_b0m0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_ndrqo4_a0m0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "on selected");
    editorCell.setCellId("Constant_ndrqo4_a0m0");
    Style style = new StyleImpl();
    InspectorExtensions_StyleSheet.apply_behavior(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_ndrqo4_b0m0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new CheckBox_Editor.onSelectedSingleRoleHandler_ndrqo4_b0m0(node, MetaAdapterFactory.getContainmentLink(0x949fc8316aef4545L, 0x8859ffa2eed47cbfL, 0x3f0f5deef89fa172L, 0x3f0f5deef89fa1b0L, "onSelected"), editorContext);
    return provider.createCell();
  }
  private class onSelectedSingleRoleHandler_ndrqo4_b0m0 extends SingleRoleCellProvider {
    public onSelectedSingleRoleHandler_ndrqo4_b0m0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    public EditorCell createChildCell(EditorContext editorContext, SNode child) {
      EditorCell editorCell = super.createChildCell(editorContext, child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    public void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("onSelected");
      }
      Style style = new StyleImpl();
      style.set(StyleAttributes.DRAW_BORDER, 0, true);
      editorCell.getStyle().putAll(style);
    }


    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_onSelected");
      installCellInfo(null, editorCell);
      return editorCell;
    }

    protected String getNoTargetText() {
      return "<no onSelected>";
    }

  }
  private EditorCell createCollection_ndrqo4_b21a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ndrqo4_b21a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    style.set(StyleAttributes.DRAW_BORDER, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ndrqo4_a1m0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_ndrqo4_b1m0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_ndrqo4_a1m0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "on de-selected");
    editorCell.setCellId("Constant_ndrqo4_a1m0");
    Style style = new StyleImpl();
    InspectorExtensions_StyleSheet.apply_behavior(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_ndrqo4_b1m0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new CheckBox_Editor.onDeSelectedSingleRoleHandler_ndrqo4_b1m0(node, MetaAdapterFactory.getContainmentLink(0x949fc8316aef4545L, 0x8859ffa2eed47cbfL, 0x3f0f5deef89fa172L, 0x3f0f5deef89fa1b2L, "onDeSelected"), editorContext);
    return provider.createCell();
  }
  private class onDeSelectedSingleRoleHandler_ndrqo4_b1m0 extends SingleRoleCellProvider {
    public onDeSelectedSingleRoleHandler_ndrqo4_b1m0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    public EditorCell createChildCell(EditorContext editorContext, SNode child) {
      EditorCell editorCell = super.createChildCell(editorContext, child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    public void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("onDeSelected");
      }
      Style style = new StyleImpl();
      style.set(StyleAttributes.DRAW_BORDER, 0, true);
      editorCell.getStyle().putAll(style);
    }


    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_onDeSelected");
      installCellInfo(null, editorCell);
      return editorCell;
    }

    protected String getNoTargetText() {
      return "<no onDeSelected>";
    }

  }
}
